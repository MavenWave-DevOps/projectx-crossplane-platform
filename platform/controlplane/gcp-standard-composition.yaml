apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: gcp-standard-projectx-platform-controlplane
  labels:
    crossplane.io/xrd: controlplanes.platform.projectx.mavenwave.dev
    provider: gcp
    class: standard
spec:
  compositeTypeRef:
    apiVersion: platform.projectx.mavenwave.dev/v1alpha1
    kind: ControlPlane
  writeConnectionSecretsToNamespace: crossplane-system
  patchSets:
  - name: name
    patches:
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s"
      toFieldPath: metadata.annotations[crossplane.io/external-name]
  - name: providerConfig
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.providerConfigRef.name
  - name: metadata
    patches:
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s"
      toFieldPath: metadata.labels[platform.projectx.mavenwave.dev/controlplane]
  resources:
  - name: network
    base:
      apiVersion: compute.gcp.crossplane.io/v1beta1
      kind: Network
      spec:
        forProvider:
          autoCreateSubnetworks: false
          routingConfig:
            routingMode: GLOBAL
    patches:
    - type: PatchSet
      patchSetName: name
    - type: PatchSet
      patchSetName: providerConfig
    - type: PatchSet
      patchSetName: metadata
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.network.vpc.id
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.selfLink
      toFieldPath: status.network.vpc.selfLink
    - type: ToCompositeFieldPath
      fromFieldPath: status.conditions
      toFieldPath: status.network.vpc.conditions

  - name: inter-node-fwrule
    base:
      apiVersion: compute.gcp.crossplane.io/v1alpha1
      kind: Firewall
      spec:
        forProvider:
          networkSelector:
            matchControllerRef: true
          allowed:
          - IPProtocol: tcp
          - IPProtocol: udp
          - IPProtocol: icmp
          - IPProtocol: sctp
          - IPProtocol: esp
          - IPProtocol: ah
          direction: EGRESS
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: PatchSet
      patchSetName: providerConfig
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-intra-cluster-egress"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-intra-cluster-egress"
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "Intra cluster egress for %s-%s cluster"
      toFieldPath: spec.forProvider.description
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.controlPlaneIpv4CidrBlock
      toFieldPath: spec.forProvider.destinationRanges[0]
      policy:
        fromFieldPath: Required
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.nodeCidr
      toFieldPath: spec.forProvider.destinationRanges[1]
      policy:
        fromFieldPath: Required
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.podCidr
      toFieldPath: spec.forProvider.destinationRanges[2]
      policy:
        fromFieldPath: Required
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-default-pool"
      toFieldPath: spec.forProvider.targetTags[0]
    - type: ToCompositeFieldPath
      fromFieldPath: status.conditions
      toFieldPath: status.network.clusterEgressFw.conditions

  - name: webhooks-fwrule
    base:
      apiVersion: compute.gcp.crossplane.io/v1alpha1
      kind: Firewall
      spec:
        forProvider:
          networkSelector:
            matchControllerRef: true
          allowed:
          - IPProtocol: tcp
            ports:
            - "8443"
            - "9443"
            - "15017"
          direction: INGRESS
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: PatchSet
      patchSetName: providerConfig
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-webhooks"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-webhooks"
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "Allow webhooks for %s-%s cluster"
      toFieldPath: spec.forProvider.description
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.controlPlaneIpv4CidrBlock
      toFieldPath: spec.forProvider.sourceRanges[0]
      policy:
        fromFieldPath: Required
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-default-pool"
      toFieldPath: spec.forProvider.targetTags[0]
    - type: ToCompositeFieldPath
      fromFieldPath: status.conditions
      toFieldPath: status.network.webhooksFw.conditions

  - name: router
    base:
      apiVersion: compute.gcp.crossplane.io/v1alpha1
      kind: Router
      spec:
        forProvider:
          networkSelector:
            matchControllerRef: true
          nats:
          - sourceSubnetworkIpRangesToNat: ALL_SUBNETWORKS_ALL_IP_RANGES
            natIpAllocateOption: AUTO_ONLY
    patches:
    - type: PatchSet
      patchSetName: name
    - type: PatchSet
      patchSetName: providerConfig
    - type: PatchSet
      patchSetName: metadata
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
      transforms:
      - type: map
        map:
          regional-us-central: us-central1
          us-central: us-central1
          us-east: us-east1
          us-west: us-west1
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        - fromFieldPath: spec.parameters.region
        strategy: string
        string:
          fmt: "%s-%s-%s"
      toFieldPath: spec.forProvider.nats[0].name
    - type: ToCompositeFieldPath
      fromFieldPath: status.conditions
      toFieldPath: status.network.router.conditions

  - name: kms-keyring
    base:
      apiVersion: kms.gcp.crossplane.io/v1alpha1
      kind: KeyRing
      spec:
        forProvider:
          location: 
    patches:
    - type: PatchSet
      patchSetName: name
    - type: PatchSet
      patchSetName: metadata
    - type: PatchSet
      patchSetName: providerConfig
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.location
      transforms:
      - type: map
        map:
          regional-us-central: us-central1
          us-central: us-central1
          us-east: us-east1
          us-west: us-west1
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.name
      toFieldPath: status.kms.keyRing.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.conditions
      toFieldPath: status.kms.keyRing.conditions

  - name: kms-crypto-key
    base:
      apiVersion: kms.gcp.crossplane.io/v1alpha1
      kind: CryptoKey
      spec:
        forProvider:
          purpose: ENCRYPT_DECRYPT
          keyRingSelector:
            matchControllerRef: true
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: PatchSet
      patchSetName: providerConfig
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s"
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.name
      toFieldPath: status.kms.cryptoKey.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.conditions
      toFieldPath: status.kms.cryptoKey.conditions

  - name: kms-key-policy
    base:
      apiVersion: kms.gcp.crossplane.io/v1alpha1
      kind: CryptoKeyPolicy
      spec:
        forProvider:
          cryptoKeySelector:
            matchControllerRef: true
          policy:
            bindings:
            - role: roles/cloudkms.cryptoKeyDecrypter
            - role: roles/cloudkms.cryptoKeyEncrypter
    patches:
    - type: PatchSet
      patchSetName: name
    - type: PatchSet
      patchSetName: metadata
    - type: PatchSet
      patchSetName: providerConfig
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.google.project.number
      toFieldPath: spec.forProvider.policy.bindings[0].members[0]
      policy:
        fromFieldPath: Required
      transforms:
      - type: string
        string:
          fmt: "serviceAccount:service-%s@container-engine-robot.iam.gserviceaccount.com"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.google.project.number
      toFieldPath: spec.forProvider.policy.bindings[1].members[0]
      policy:
        fromFieldPath: Required
      transforms:
      - type: string
        string:
          fmt: "serviceAccount:service-%s@container-engine-robot.iam.gserviceaccount.com"
    - type: ToCompositeFieldPath
      fromFieldPath: status.conditions
      toFieldPath: status.kms.cryptoKeyPolicy.conditions

  - name: cluster
    base:
      apiVersion: container.gcp.crossplane.io/v1beta2
      kind: Cluster
      spec:
        writeConnectionSecretToRef:
          namespace: crossplane-system
        forProvider:
          addonsConfig:
            configConnectorConfig:
              enabled: true
            gcePersistentDiskCSIDriverConfig:
              enabled: true
            horizontalPodAutoscaling:
              disabled: false
            httpLoadBalancing:
              disabled: false
          binaryAuthorization:
            enabled: true
          databaseEncryption:
            state: ENCRYPTED
            keyName:
          initialClusterVersion: latest
          ipAllocationPolicy:
            clusterIpv4CidrBlock:
            createSubnetwork: true
            nodeIpv4CidrBlock:
            servicesIpv4CidrBlock:
            useIpAliases: true
          location:
          maintenancePolicy:
            window:
              dailyMaintenanceWindow:
                startTime: 06:00
          masterAuthorizedNetworksConfig:
            enabled: false
            cidrBlocks: []
          networkConfig:
            enableIntraNodeVisibility: true
            datapathProvider: ADVANCED_DATAPATH
          networkSelector:
            matchControllerRef: true
          privateClusterConfig:
            masterIpv4CidrBlock:
            enablePrivateNodes: true
          resourceLabels:
            class: standard
            controlplane: "true"
          releaseChannel:
            channel: STABLE
    patches:
    - type: PatchSet
      patchSetName: name
    - type: PatchSet
      patchSetName: metadata
    - type: PatchSet
      patchSetName: providerConfig
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-controlplane"
      toFieldPath: spec.writeConnectionSecretToRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.location
      transforms:
      - type: map
        map:
          regional-us-central: us-central1-c
          us-central: us-central1
          us-east: us-east1
          us-west: us-west1
    - type: FromCompositeFieldPath
      fromFieldPath: status.kms.cryptoKey.name
      toFieldPath: spec.forProvider.databaseEncryption.keyName
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-controlplane"
      toFieldPath: spec.forProvider.ipAllocationPolicy.subnetworkName
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.nodeCidr
      toFieldPath: spec.forProvider.ipAllocationPolicy.nodeIpv4CidrBlock
      policy:
        fromFieldPath: Required
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.podCidr
      toFieldPath: spec.forProvider.ipAllocationPolicy.clusterIpv4CidrBlock
      policy:
        fromFieldPath: Required
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.serviceCidr
      toFieldPath: spec.forProvider.ipAllocationPolicy.servicesIpv4CidrBlock
      policy:
        fromFieldPath: Required
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.authorizedNetworks.enabled
      toFieldPath: spec.forProvider.masterAuthorizedNetworksConfig.enabled
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.authorizedNetworks.cidrBlocks
      toFieldPath: spec.forProvider.masterAuthorizedNetworksConfig.cidrBlocks
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.controlPlaneIpv4CidrBlock
      toFieldPath: spec.forProvider.privateClusterConfig.masterIpv4CidrBlock
      policy:
        fromFieldPath: Required
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.google.project.id
      toFieldPath: spec.forProvider.workloadIdentityConfig.workloadPool
      policy:
        fromFieldPath: Required
      transforms:
      - type: string
        string:
          fmt: "%s.svc.id.goog"
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.endpoint
      toFieldPath: status.cluster.endpoint
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.selfLink
      toFieldPath: status.cluster.selfLink
    - type: ToCompositeFieldPath
      fromFieldPath: spec.forProvider.clusterIpv4Cidr
      toFieldPath: status.cluster.pods.cidr
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.servicesIpv4Cidr
      toFieldPath: status.cluster.services.cidr
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.location
      toFieldPath: status.cluster.location
    - type: ToCompositeFieldPath
      fromFieldPath: status.conditions
      toFieldPath: status.cluster.conditions
    connectionDetails:
    - name: kubeconfig
      fromConnectionSecretKey: kubeconfig
    readinessChecks:
    - type: MatchString
      fieldPath: "status.atProvider.status"
      matchString: "RUNNING"

  - name: nodepool
    base:
      apiVersion: container.gcp.crossplane.io/v1beta1
      kind: NodePool
      metadata:
        annotations:
          crossplane.io/external-name: default-nodepool
      spec:
        forProvider:
          autoscaling:
            enabled: true
          clusterSelector:
            matchControllerRef: true
          config:
            diskType: pd-ssd
            authScopes:
            - https://www.googleapis.com/auth/devstorage.read_only
            - https://www.googleapis.com/auth/logging.write
            - https://www.googleapis.com/auth/monitoring
            - https://www.googleapis.com/auth/servicecontrol
            - https://www.googleapis.com/auth/service.management.readonly
            - https://www.googleapis.com/auth/trace.append
            - https://www.googleapis.com/auth/cloud-platform
            linuxNodeConfig:
              sysctls: {}
            shieldedInstanceConfig:
              enableSecureBoot: true
            workloadMetadataConfig:
              mode: GKE_METADATA
          initialNodeCount: 1
          management:
            autoRepair: true
            autoUpgrade: true
          upgradeSettings:
            maxSurge: 1
            maxUnavailable: 1
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: PatchSet
      patchSetName: providerConfig
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-default-pool"
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.nodeMin
      toFieldPath: spec.forProvider.autoscaling.minNodeCount
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.nodeMax
      toFieldPath: spec.forProvider.autoscaling.maxNodeCount
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.diskSizeGb
      toFieldPath: spec.forProvider.config.diskSizeGb
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.nodeMachineType
      toFieldPath: spec.forProvider.config.machineType
      transforms:
      - type: map
        map:
          small: e2-medium
          medium: n2-standard-4
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-default-pool"
      toFieldPath: spec.forProvider.config.tags[0]
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.selfLink
      toFieldPath: status.nodePool.selfLink
    - type: ToCompositeFieldPath
      fromFieldPath: status.conditions
      toFieldPath: status.nodePool.conditions
    readinessChecks:
    - type: MatchString
      fieldPath: status.atProvider.status
      matchString: RUNNING

  
  - name: kubernetes-config
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: ProviderConfig
      spec:
        credentials:
          source: Secret
          secretRef:
            namespace: crossplane-system
            key: kubeconfig
        identity:
          type: GoogleApplicationCredentials
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-controlplane"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-controlplane"
      toFieldPath: spec.credentials.secretRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.identity.source
      toFieldPath: spec.identity.source
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.identity.secretRef.namespace
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.identity.secretRefName
      toFieldPath: spec.identity.secretRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.identity.secretRefKey
      toFieldPath: spec.identity.secretRef.key
    readinessChecks:
    - type: None

  - name: helm-config
    base:
      apiVersion: helm.crossplane.io/v1beta1
      kind: ProviderConfig
      spec:
        credentials:
          source: Secret
          secretRef:
            namespace: crossplane-system
            key: kubeconfig
        identity:
          type: GoogleApplicationCredentials
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-controlplane"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-controlplane"
      toFieldPath: spec.credentials.secretRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.identity.source
      toFieldPath: spec.identity.source
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.identity.secretRef.namespace
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.identity.secretRefName
      toFieldPath: spec.identity.secretRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.identity.secretRefKey
      toFieldPath: spec.identity.secretRef.key
    readinessChecks:
    - type: None

  - name: crossplane-gcp-k8s-sa
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: gcp-provider
              namespace: crossplane-system
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-crossplane-gcp-sa"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-controlplane"
      toFieldPath: spec.providerConfigRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.google.crossplaneServiceAccountEmail
      toFieldPath: spec.forProvider.manifest.metadata.annotations[iam.gke.io/gcp-service-account]

  - name: crossplane-gcp-sa-iam
    base:
      apiVersion: iam.gcp.crossplane.io/v1alpha1
      kind: ServiceAccountPolicy
      spec:
        forProvider:
          policy:
            bindings:
            - role: roles/iam.workloadIdentityUser
              members: []
    patches:
    - type: PatchSet
      patchSetName: name
    - type: PatchSet
      patchSetName: metadata
    - type: PatchSet
      patchSetName: providerConfig
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.parameters.google.project.id
        - fromFieldPath: spec.parameters.google.crossplaneServiceAccountEmail
        strategy: string
        string:
          fmt: "projects/%s/serviceAccounts/%s"
      toFieldPath: spec.forProvider.serviceAccount
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.google.project.id
      toFieldPath: spec.forProvider.policy.bindings[0].members[0]
      transforms:
      - type: string
        string:
          fmt: "serviceAccount:%s.svc.id.goog[crossplane-system/gcp-provider]"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.google.project.id
      toFieldPath: spec.forProvider.policy.bindings[0].members[1]
      transforms:
      - type: string
        string:
          fmt: "serviceAccount:%s.svc.id.goog[crossplane-system/kubernetes-provider]"

  - name: crossplane-kubernetes-k8s-sa
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: kubernetes-provider
              namespace: crossplane-system
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-crossplane-kubernetes-sa"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-controlplane"
      toFieldPath: spec.providerConfigRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.google.crossplaneServiceAccountEmail
      toFieldPath: spec.forProvider.manifest.metadata.annotations[iam.gke.io/gcp-service-account]

  - name: crossplane-gcp-controller-config
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: pkg.crossplane.io/v1alpha1
            kind: ControllerConfig
            metadata:
              name: gcp-provider
            spec:
              serviceAccountName: gcp-provider
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-crossplane-gcp-controller-config"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-controlplane"
      toFieldPath: spec.providerConfigRef.name

  - name: crossplane-kubernetes-controller-config
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: pkg.crossplane.io/v1alpha1
            kind: ControllerConfig
            metadata:
              name: kubernetes-provider
            spec:
              serviceAccountName: kubernetes-provider
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-crossplane-kubernetes-controller-config"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-controlplane"
      toFieldPath: spec.providerConfigRef.name

  - name: crossplane-gcp-provider
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: pkg.crossplane.io/v1
            kind: Provider
            metadata:
              name: gcp-provider
            spec:
              package: crossplane/provider-gcp:v0.21.0
              controllerConfigRef:
                name: gcp-provider
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-crossplane-gcp-provider"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-controlplane"
      toFieldPath: spec.providerConfigRef.name

  - name: crossplane-kubernetes-provider
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: pkg.crossplane.io/v1
            kind: Provider
            metadata:
              name: kubernetes-provider
            spec:
              package: us.gcr.io/bradw-nextgen-devops/provider-kubernetes-amd64:v0.5.0-rc.10.gb13a762
              controllerConfigRef:
                name: kubernetes-provider
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-crossplane-kubernetes-provider"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-controlplane"
      toFieldPath: spec.providerConfigRef.name

  - name: crossplane-helm-provider
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: pkg.crossplane.io/v1
            kind: Provider
            metadata:
              name: helm-provider
            spec:
              package: us.gcr.io/bradw-nextgen-devops/provider-helm-amd64:v0.11.0-rc.18.g7434e43
              controllerConfigRef:
                name: kubernetes-provider
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-crossplane-helm-provider"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-controlplane"
      toFieldPath: spec.providerConfigRef.name

  - name: crossplane
    base:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
      metadata:
        annotations: 
          crossplane.io/external-name: crossplane
      spec:
        forProvider:
          chart:
            name: crossplane
            repository: https://charts.crossplane.io/stable/
            version: 1.9.0
          namespace: crossplane-system
          wait: true
        rollbackLimit: 5
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-crossplane"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-controlplane"
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.conditions
      toFieldPath: status.crossplane.conditions

  - name: crossplane-platform-config
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: pkg.crossplane.io/v1
            kind: Configuration
            metadata:
              name: platform
            spec:
              package: ghcr.io/mavenwave-devops/projectx-crossplane-platform:main
              packagePullPolicy: Always
              skipDependencyResolution: true
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-crossplane-platform-config"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-controlplane"
      toFieldPath: spec.providerConfigRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.platform.version
      toFieldPath: spec.forProvider.manifest.spec.package
      transforms:
      - type: string
        string:
          fmt: "ghcr.io/mavenwave-devops/projectx-crossplane-platform:%s"
