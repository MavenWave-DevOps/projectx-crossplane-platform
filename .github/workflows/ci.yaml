name: ci

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

env:
  REGISTRY: ghcr.io
  IMAGE: ${{ github.repository }}

jobs:
  package:
    runs-on: ubuntu-latest
    # container:
    #   image: ghcr.io/mavenwave-devops/projectx-crossplane-tools:0.1
    #   volumes:
    #     - /var/run/docker.sock:/var/run/docker.sock
    steps:
    - run: |
        cd /usr/local/bin
        if [ ! -f  kubectl ]; then
          sudo curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo chmod +x kubectl
        fi
        if [ ! -f  kustomize ]; then
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | sudo bash
        fi
        if [ ! -f  kubectl-crossplane ]; then
          curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sudo sh
        fi

    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
     
    - name: Log in to the Container registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: PrepareReg Names
      run: |
        echo IMAGE=$(echo ${{ env.IMAGE }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE }}
        sep-tags: ","
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - run: |
        mkdir -p build
        for i in crossplane.yaml definition.yaml; do cp package/$i build/$i; done
        for i in $(ls src/compositions); do kustomize build src/compositions/$i > build/$i-composition.yaml; done
        cd build
        kubectl crossplane build configuration
        for i in $(echo ${{ steps.meta.outputs.tags }} | tr "," " "); do kubectl crossplane push configuration $i; done