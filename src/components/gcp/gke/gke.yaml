---
# Firewall rule for GKE node egress
- op: add
  path: /spec/resources/-1
  value:
    name: inter-node-fwrule
    base:
      apiVersion: compute.gcp.crossplane.io/v1alpha1
      kind: Firewall
      spec:
        forProvider:
          allowed:
          - IPProtocol: tcp
          - IPProtocol: udp
          - IPProtocol: icmp
          - IPProtocol: sctp
          - IPProtocol: esp
          - IPProtocol: ah
          direction: EGRESS
          networkSelector:
            matchControllerRef: true
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-gke-intra-cluster-egress"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      transforms:
      - type: string
        string: 
          fmt: "%s-gke-intra-cluster-egress"
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.providerConfigRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.google.masterIpv4CidrBlock
      toFieldPath: spec.forProvider.destinationRanges[0]
    - type: FromCompositeFieldPath
      fromFieldPath: status.subnetwork.cidr
      toFieldPath: spec.forProvider.destinationRanges[1]
    - type: FromCompositeFieldPath
      fromFieldPath: status.cluster.podIpv4Cidr
      toFieldPath: spec.forProvider.destinationRanges[2]
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.targetTags[0]
# Firewall rule for GKE webhook ingress
- op: add
  path: /spec/resources/-1
  value:
    name: webhooks-fwrule
    base:
      apiVersion: compute.gcp.crossplane.io/v1alpha1
      kind: Firewall
      spec:
        forProvider:
          allowed:
          - IPProtocol: tcp
            ports:
            - "8443"
            - "9443"
            - "15017"
          direction: INGRESS
          networkSelector:
            matchControllerRef: true
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-gke-webhooks"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      transforms:
      - type: string
        string: 
          fmt: "%s-gke-webhooks"
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.providerConfigRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.google.masterIpv4CidrBlock
      toFieldPath: spec.forProvider.sourceRanges[0]
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.targetTags[0]
# GKE Cluster      
- op: add
  path: /spec/resources/-1
  value:
    name: cluster
    base:
      apiVersion: container.gcp.crossplane.io/v1beta2
      kind: Cluster
      spec:
        writeConnectionSecretToRef:
          namespace: crossplane-system
        forProvider:
          addonsConfig:
            configConnectorConfig:
              enabled: true
            gcePersistentDiskCSIDriverConfig:
              enabled: true
            horizontalPodAutoscaling:
              disabled: false
            httpLoadBalancing:
              disabled: false
          binaryAuthorization:
            enabled: true
          initialClusterVersion: latest
          ipAllocationPolicy:
            clusterIpv4CidrBlock: /16
            servicesIpv4CidrBlock: /20
            useIpAliases: true
          maintenancePolicy:
            window:
              dailyMaintenanceWindow:
                startTime: 06:00
          masterAuthorizedNetworksConfig:
            enabled: true
            cidrBlocks:
            - displayName: public
              cidrBlock: 0.0.0.0/0
          networkConfig:
            enableIntraNodeVisibility: true
            datapathProvider: ADVANCED_DATAPATH
          networkSelector:
            matchControllerRef: true
          privateClusterConfig:
            enablePrivateNodes: true
          releaseChannel:
            channel: STABLE
          subnetworkSelector:
            matchControllerRef: true
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.providerConfigRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.writeConnectionSecretToRef.name
      transforms:
      - type: string
        string:
          fmt: "%s-cluster"
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.description
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.location
      transforms:
      - type: map
        map:
          us-central: us-central1
          us-east: us-east1
          us-west: us-west1
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.google.masterIpv4CidrBlock
      toFieldPath: spec.forProvider.privateClusterConfig.masterIpv4CidrBlock
      policy:
        fromFieldPath: Required
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.google.projectId
      toFieldPath: spec.forProvider.workloadIdentityConfig.workloadPool
      transforms:
      - type: string
        string:
          fmt: "%s.svc.id.goog"
      policy:
        fromFieldPath: Required
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.endpoint
      toFieldPath: status.cluster.endpoint
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.selfLink
      toFieldPath: status.cluster.selfLink
    - type: ToCompositeFieldPath
      fromFieldPath: spec.forProvider.clusterIpv4Cidr
      toFieldPath: status.cluster.podIpv4Cidr
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.servicesIpv4Cidr
      toFieldPath: status.cluster.servicesIpv4Cidr
    connectionDetails:
    - fromConnectionSecretKey: kubeconfig
    readinessChecks:
    - type: MatchString
      fieldPath: "status.atProvider.status"
      matchString: "RUNNING"
# GKE Nodepool
- op: add
  path: /spec/resources/-1
  value:
    name: nodepool
    base:
      apiVersion: container.gcp.crossplane.io/v1beta1
      kind: NodePool
      metadata:
        annotations:
          crossplane.io/external-name: default-nodepool
      spec:
        forProvider:
          autoscaling:
            enabled: true
            maxNodeCount: 100
            minNodeCount: 1
          clusterSelector:
            matchControllerRef: true
          config:
            diskSizeGb: 100
            diskType: pd-ssd
            machineType: ""
            authScopes:
            - https://www.googleapis.com/auth/devstorage.read_only
            - https://www.googleapis.com/auth/logging.write
            - https://www.googleapis.com/auth/monitoring
            - https://www.googleapis.com/auth/servicecontrol
            - https://www.googleapis.com/auth/service.management.readonly
            - https://www.googleapis.com/auth/trace.append
            - https://www.googleapis.com/auth/cloud-platform
            shieldedInstanceConfig:
              enableSecureBoot: true
            workloadMetadataConfig:
              mode: GKE_METADATA
          initialNodeCount: 1
          management:
            autoRepair: true
            autoUpgrade: true
          upgradeSettings:
            maxSurge: 1
            maxUnavailable: 1
    patches:
    - type: PatchSet
      patchSetName: metadata
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.providerConfigRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.machineType
      toFieldPath: spec.forProvider.config.machineType
      transforms:
      - type: map
        map:
          small: e2-medium
          medium: n2-standard-4
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.config.tags[0]
    readinessChecks:
    - type: MatchString
      fieldPath: status.atProvider.status
      matchString: RUNNING
# Helm Config
- op: add
  path: /spec/resources/-1
  value:
    name: helm-config
    base:
      apiVersion: helm.crossplane.io/v1beta1
      kind: ProviderConfig
      spec:
        credentials:
          source: Secret
          secretRef:
            namespace: crossplane-system
            key: kubeconfig
        identity:
          type: GoogleApplicationCredentials
          source: Secret
          secretRef:
            key: token
            namespace: crossplane-system
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-cluster"
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.credentials.secretRef.name
      transforms:
      - type: string
        string:
          fmt: "%s-cluster"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.identity.secretRef.namespace
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.identity.secretRef.name
    readinessChecks:
    - type: None
# Kubernetes Config
- op: add
  path: /spec/resources/-1
  value:
    name: kubernetes-config
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: ProviderConfig
      spec:
        credentials:
          source: Secret
          secretRef:
            namespace: crossplane-system
            key: kubeconfig
        identity:
          type: GoogleApplicationCredentials
          source: Secret
          secretRef:
            key: token
            namespace: crossplane-system
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-cluster"
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.credentials.secretRef.name
      transforms:
      - type: string
        string:
          fmt: "%s-cluster"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.identity.secretRef.namespace
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.identity.secretRef.name
    readinessChecks:
    - type: None