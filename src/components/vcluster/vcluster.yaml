---
- op: add
  path: /spec/resources/-1
  value:
    name: vcluster
    base:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
      metadata:
        annotations: 
          crossplane.io/external-name:
      spec:
        writeConnectionSecretToRef:
          namespace: crossplane-system
        # connectionDetails:
        # - apiVersion: v1
        #   kind: Secret
        #   namespace:
        #   name: 
        #   fieldPath: data.config
        #   toConnectionSecretKey: kubeconfig
        forProvider:
          waitTimeout: 10m
          chart:
            name: vcluster
            repository: https://charts.loft.sh
            version: 0.7.1
            values:
              syncer:
                extraArgs: []
              ingress:
                enabled: true
                host:
          namespace: 
          wait: true
        rollbackLimit: 5
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.annotations['crossplane.io/external-name']
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.providerConfigRef.name
    # - type: FromCompositeFieldPath
    #   fromFieldPath: spec.claimRef.namespace
    #   toFieldPath: spec.connectionDetails[0].namespace
    # - type: FromCompositeFieldPath
    #   fromFieldPath: metadata.name
    #   toFieldPath: spec.connectionDetails[0].name
    #   transforms:
    #   - type: string
    #     string:
    #       fmt: "vc-%s"
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-vcluster"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.forProvider.namespace
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.writeConnectionSecretToRef.name
      transforms:
      - type: string
        string:
          fmt: "%s-cluster"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.vcluster.host
      toFieldPath: spec.forProvider.chart.values.syncer.extraArgs[0]
      transforms:
      - type: string
        string:
          fmt: "--tls-san=%s"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.vcluster.host
      toFieldPath: spec.forProvider.chart.values.ingress.host
# Helm Config
- op: add
  path: /spec/resources/-1
  value:
    name: helm-config
    base:
      apiVersion: helm.crossplane.io/v1beta1
      kind: ProviderConfig
      spec:
        credentials:
          source: Secret
          secretRef:
            namespace:
            key: config
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-cluster"
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.credentials.secretRef.name
      transforms:
      - type: string
        string:
          fmt: "vc-%s"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.credentials.secretRef.namespace
    readinessChecks:
    - type: None
# Kubernetes Config
- op: add
  path: /spec/resources/-1
  value:
    name: kubernetes-config
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: ProviderConfig
      spec:
        credentials:
          source: Secret
          secretRef:
            namespace:
            key: config
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-cluster"
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.credentials.secretRef.name
      transforms:
      - type: string
        string:
          fmt: "vc-%s"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.credentials.secretRef.namespace
    readinessChecks:
    - type: None
# # Ingress    
# - op: add
#   path: /spec/resources/-1
#   value:
#     name: vcluster-ingress
#     base:
#       apiVersion: kubernetes.crossplane.io/v1alpha1
#       kind: Object
#       metadata:
#       spec:
#         forProvider:
#           manifest:
#             apiVersion: networking.k8s.io/v1
#             kind: Ingress
#             metadata:
#               namespace:
#               annotations:
#                 kubernetes.io/ingress.class: nginx
#                 nginx.ingress.kubernetes.io/backend-protocol: HTTPS
#                 nginx.ingress.kubernetes.io/ssl-passthrough: "true"
#                 nginx.ingress.kubernetes.io/ssl-redirect: "true"
#             spec:
#               rules:
#                 - host: 
#                   http:
#                     paths:
#                     - backend:
#                         service:
#                           name: 
#                           port: 
#                             number: 443
#                       path: /
#                       pathType: ImplementationSpecific
#     patches:
#     - type: FromCompositeFieldPath
#       fromFieldPath: metadata.name
#       toFieldPath: metadata.name
#       transforms:
#       - type: string
#         string:
#           fmt: "%s-vcluster-ingress"
#     - type: FromCompositeFieldPath
#       fromFieldPath: spec.claimRef.namespace
#       toFieldPath: spec.providerConfigRef.name
#     - type: FromCompositeFieldPath
#       fromFieldPath: metadata.name
#       toFieldPath: metadata.annotations['crossplane.io/external-name']
#       transforms:
#       - type: string
#         string:
#           fmt: "%s-vcluster-ingress"
#     - type: FromCompositeFieldPath
#       fromFieldPath: spec.claimRef.namespace
#       toFieldPath: spec.forProvider.manifest.metadata.namespace
#     - type: FromCompositeFieldPath
#       fromFieldPath: spec.parameters.vcluster.host
#       toFieldPath: spec.forProvider.manifest.spec.rules[0].host
#     - type: FromCompositeFieldPath
#       fromFieldPath: metadata.name
#       toFieldPath: spec.forProvider.manifest.spec.rules[0].http.paths[0].backend.service.name