apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: projectx-gcp-simplecluster
  labels:
    crossplane.io/xrd: xsimpleclusters.gcp.projectx.mavenwave.dev
spec:
  compositeTypeRef:
    apiVersion: gcp.projectx.mavenwave.dev/v1alpha1
    kind: XSimpleCLuster
  writeConnectionSecretsToNamespace: crossplane-system
  patchSets:
  - name: common
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.labels
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: metadata.labels[ref.projectx.mavenwave.dev/tenant]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.providerConfigRef.name
  resources:
  # Network
  - name: network
    base:
      apiVersion: compute.gcp.crossplane.io/v1beta1
      kind: Network
      spec:
        forProvider:
          autoCreateSubnetworks: false
          routingConfig:
            routingMode: GLOBAL
    patches:
    - type: PatchSet
      patchSetName: common
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      toFieldPath: metadata.labels[xsimpleclusters.projectx.mavenwave.dev/network-id]
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.network.id
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.selfLink
      toFieldPath: status.network.selfLink
  # Firewall rule for GKE node egress
  - name: inter-node-fwrule
    base:
      apiVersion: compute.gcp.crossplane.io/v1alpha1
      kind: Firewall
      spec:
        forProvider:
          networkSelector:
            matchControllerRef: true
          allowed:
          - IPProtocol: tcp
          - IPProtocol: udp
          - IPProtocol: icmp
          - IPProtocol: sctp
          - IPProtocol: esp
          - IPProtocol: ah
          direction: EGRESS
    patches:
    - type: PatchSet
      patchSetName: common
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string: 
          fmt: "%s-gke-intra-cluster-egress"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      toFieldPath: metadata.annotations[crossplane.io/external-name]
      transforms:
      - type: string
        string: 
          fmt: "%s-gke-intra-cluster-egress"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.cluster.masterIpv4CidrBlock
      toFieldPath: spec.forProvider.destinationRanges[0]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.network.nodes.cidr
      toFieldPath: spec.forProvider.destinationRanges[1]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.network.pods.cidr
      toFieldPath: spec.forProvider.destinationRanges[2]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.network.nodes.tags
      toFieldPath: spec.forProvider.targetTags
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      toFieldPath: metadata.labels[xsimpleclusters.projectx.mavenwave.dev/network-id]
  # Firewall rule for GKE webhook ingress
  - name: webhooks-fwrule
    base:
      apiVersion: compute.gcp.crossplane.io/v1alpha1
      kind: Firewall
      spec:
        forProvider:
          networkSelector:
            matchControllerRef: true
          allowed:
          - IPProtocol: tcp
            ports:
            - "8443"
            - "9443"
            - "15017"
          direction: INGRESS
    patches:
    - type: PatchSet
      patchSetName: common
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string: 
          fmt: "%s-gke-webhooks"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      toFieldPath: metadata.annotations[crossplane.io/external-name]
      transforms:
      - type: string
        string: 
          fmt: "%s-gke-webhooks"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.cluster.masterIpv4CidrBlock
      toFieldPath: spec.forProvider.sourceRanges[0]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.network.nodes.tags
      toFieldPath: spec.forProvider.targetTags
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      toFieldPath: metadata.labels[xsimpleclusters.projectx.mavenwave.dev/network-id]
  # Nat
  - name: router
    base:
      apiVersion: compute.gcp.crossplane.io/v1alpha1
      kind: Router
      spec:
        forProvider:
          networkSelector:
            matchControllerRef: true
          nats:
          - sourceSubnetworkIpRangesToNat: ALL_SUBNETWORKS_ALL_IP_RANGES
            natIpAllocateOption: AUTO_ONLY
    patches:
    - type: PatchSet
      patchSetName: common
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
      transforms:
      - type: map
        map:
          us-central: us-central1
          us-east: us-east1
          us-west: us-west1
    - type:  FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      toFieldPath: spec.forProvider.nats[0].name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      toFieldPath: metadata.labels[xsimpleclusters.projectx.mavenwave.dev/network-id]
  # KMS Keyring
  - name: kms-keyring
    base:
      apiVersion: kms.gcp.crossplane.io/v1alpha1
      kind: KeyRing
      spec:
        forProvider:
          location: 
    patches:
    - type: PatchSet
      patchSetName: common
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.location
      transforms:
      - type: map
        map:
          us-central: us-central1
          us-east: us-east1
          us-west: us-west1
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      toFieldPath: metadata.labels[xsimpleclusters.projectx.mavenwave.dev/kms-id]
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.name
      toFieldPath: status.kms.keyRing.name
  # KMS Crypto Key      
  - name: kms-crypto-key
    base:
      apiVersion: kms.gcp.crossplane.io/v1alpha1
      kind: CryptoKey
      spec:
        forProvider:
          purpose: ENCRYPT_DECRYPT
          keyRingSelector:
            matchControllerRef: true
    patches:
    - type: PatchSet
      patchSetName: common
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.name
        - fromFieldPath: spec.parameters.region
        strategy: string
        string:
          fmt: "%s-gke-%s"
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      toFieldPath: metadata.labels[xsimpleclusters.projectx.mavenwave.dev/kms-id]
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.name
      toFieldPath: status.kms.cryptoKey.name
  # KMS Crypto Key Policy
  - name: kms-key-policy
    base:
      apiVersion: kms.gcp.crossplane.io/v1alpha1
      kind: CryptoKeyPolicy
      spec:
        forProvider:
          cryptoKeySelector:
            matchControllerRef: true
          policy:
            bindings:
            - role: roles/cloudkms.cryptoKeyDecrypter
            - role: roles/cloudkms.cryptoKeyEncrypter
    patches:
    - type: PatchSet
      patchSetName: common
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.gcp.projectNumber
      toFieldPath: spec.forProvider.policy.bindings[0].members[0]
      transforms:
      - type: string
        string:
          fmt: "serviceAccount:service-%s@container-engine-robot.iam.gserviceaccount.com"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.gcp.projectNumber
      toFieldPath: spec.forProvider.policy.bindings[1].members[0]
      transforms:
      - type: string
        string:
          fmt: "serviceAccount:service-%s@container-engine-robot.iam.gserviceaccount.com"
  # GKE Cluster
  - name: cluster
    base:
      apiVersion: container.gcp.crossplane.io/v1beta2
      kind: Cluster
      spec:
        writeConnectionSecretToRef:
          namespace: crossplane-system
        forProvider:
          addonsConfig:
            configConnectorConfig:
              enabled: true
            gcePersistentDiskCSIDriverConfig:
              enabled: true
            horizontalPodAutoscaling:
              disabled: false
            httpLoadBalancing:
              disabled: false
          binaryAuthorization:
            enabled: true
          databaseEncryption:
            state: ENCRYPTED
            keyName:
          initialClusterVersion: latest
          ipAllocationPolicy:
            clusterIpv4CidrBlock:
            createSubnetwork: true
            nodeIpv4CidrBlock:
            servicesIpv4CidrBlock:
            useIpAliases: true
          location:
          maintenancePolicy:
            window:
              dailyMaintenanceWindow:
                startTime: 06:00
          masterAuthorizedNetworksConfig:
            enabled:
            cidrBlocks: []
          networkConfig:
            enableIntraNodeVisibility: true
            datapathProvider: ADVANCED_DATAPATH
          networkSelector:
            matchControllerRef: true
          privateClusterConfig:
            masterIpv4CidrBlock:
            enablePrivateNodes: true
          releaseChannel:
            channel: STABLE
    patches:
    - type: PatchSet
      patchSetName: common
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.writeConnectionSecretToRef.name
      transforms:
      - type: string
        string:
          fmt: "%s-cluster"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.location
      transforms:
      - type: map
        map:
          us-central: us-central1
          us-east: us-east1
          us-west: us-west1
    - type: FromCompositeFieldPath
      fromFieldPath: status.kms.cryptoKey.name
      toFieldPath: spec.forProvider.databaseEncryption.keyName
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.ipAllocationPolicy.subnetworkName
      transforms:
      - type: string
        string:
          fmt: "%s-gke"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.networks.pods.cidr
      toFieldPath: spec.forProvider.ipAllocationPolicy.clusterIpv4CidrBlock
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.networks.nodes.cidr
      toFieldPath: spec.forProvider.ipAllocationPolicy.nodeIpv4CidrBlock
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.networks.services.cidr
      toFieldPath: spec.forProvider.ipAllocationPolicy.servicesIpv4CidrBlock
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.cluster.authorizedNetworks.enabled
      toFieldPath: spec.forProvider.masterAuthorizedNetworksConfig.enabled
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.cluster.authorizedNetworks.cidrBlocks
      toFieldPath: spec.forProvider.masterAuthorizedNetworksConfig.cidrBlocks
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.cluster.masterIpv4CidrBlock
      toFieldPath: spec.forProvider.privateClusterConfig.masterIpv4CidrBlock
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.gcp.projectId
      toFieldPath: spec.forProvider.workloadIdentityConfig.workloadPool
      transforms:
      - type: string
        string:
          fmt: "%s.svc.id.goog"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      toFieldPath: metadata.labels[xsimpleclusters.projectx.mavenwave.dev/cluster-id]
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.endpoint
      toFieldPath: status.cluster.endpoint
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.selfLink
      toFieldPath: status.cluster.selfLink
    - type: ToCompositeFieldPath
      fromFieldPath: spec.forProvider.clusterIpv4Cidr
      toFieldPath: status.cluster.pods.cidr
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.servicesIpv4Cidr
      toFieldPath: status.cluster.services.cidr
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.location
      toFieldPath: status.cluster.location
    connectionDetails:
    - name: kubeconfig
      fromConnectionSecretKey: kubeconfig
    readinessChecks:
    - type: MatchString
      fieldPath: "status.atProvider.status"
      matchString: "RUNNING"
  # GKE Nodepool
  - name: nodepool
    base:
      apiVersion: container.gcp.crossplane.io/v1beta1
      kind: NodePool
      metadata:
        annotations:
          crossplane.io/external-name: default-nodepool
      spec:
        forProvider:
          autoscaling:
            enabled: true
          clusterSelector:
            matchControllerRef: true
          config:
            diskType: pd-ssd
            authScopes:
            - https://www.googleapis.com/auth/devstorage.read_only
            - https://www.googleapis.com/auth/logging.write
            - https://www.googleapis.com/auth/monitoring
            - https://www.googleapis.com/auth/servicecontrol
            - https://www.googleapis.com/auth/service.management.readonly
            - https://www.googleapis.com/auth/trace.append
            - https://www.googleapis.com/auth/cloud-platform
            shieldedInstanceConfig:
              enableSecureBoot: true
            workloadMetadataConfig:
              mode: GKE_METADATA
          initialNodeCount: 1
          management:
            autoRepair: true
            autoUpgrade: true
          upgradeSettings:
            maxSurge: 1
            maxUnavailable: 1
    patches:
    - type: PatchSet
      patchSetName: common
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.cluster.min
      toFieldPath: spec.forProvider.autoscaling.minNodeCount
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.cluster.max
      toFieldPath: spec.forProvider.autoscaling.maxNodeCount
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.cluster.diskSizeGb
      toFieldPath: spec.forProvider.config.diskSizeGb
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.cluster.machineType
      toFieldPath: spec.forProvider.config.machineType
      transforms:
      - type: map
        map:
          small: e2-medium
          medium: n2-standard-4
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.network.nodes.tags
      toFieldPath: spec.forProvider.config.tags
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.name
      toFieldPath: metadata.labels[xsimpleclusters.projectx.mavenwave.dev/cluster-id]
    readinessChecks:
    - type: MatchString
      fieldPath: status.atProvider.status
      matchString: RUNNING
# Helm Config
  - name: helm-config
    base:
      apiVersion: helm.crossplane.io/v1beta1
      kind: ProviderConfig
      spec:
        credentials:
          source: Secret
          secretRef:
            namespace: crossplane-system
            key: kubeconfig
        identity:
          type: GoogleApplicationCredentials
          secretRef:
            key: token
    patches:
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-cluster"
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.credentials.secretRef.name
      transforms:
      - type: string
        string:
          fmt: "%s-cluster"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.cluster.identity.source
      toFieldPath: spec.identity.source
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.identity.secretRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.identity.secretRef.namespace
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: metadata.labels[ref.projectx.mavenwave.dev/tenant]
    readinessChecks:
    - type: None
# OPA Gatekeeper
  - name: opa-gatekeeper
    base:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
      metadata:
        annotations: 
          crossplane.io/external-name: gatekeeper
      spec:
        forProvider:
          chart:
            name:  gatekeeper
            repository: https://open-policy-agent.github.io/gatekeeper/charts
            version: 3.8.1
          namespace: gatekeeper-system
          wait: true
          waitTimeout: 1h
          values:
            disableValidatingWebhook: false
            preUninstall:
              deleteWebhooks:
                enabled: true
            psp:
              enabled: false
            validatingWebhookTimeoutSeconds: 10
            mutatingWebhookTimeoutSeconds: 10
        rollbackLimit: 5
    patches:
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-opa-gatekeeper"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-cluster"
      toFieldPath: spec.providerConfigRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: metadata.labels[ref.projectx.mavenwave.dev/tenant]
# Kubernetes Config
  - name: kubernetes-config
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: ProviderConfig
      spec:
        credentials:
          source: Secret
          secretRef:
            namespace: crossplane-system
            key: kubeconfig
        identity:
          type: GoogleApplicationCredentials
          source: Secret
          secretRef:
            namespace: crossplane-system
            key: token
    patches:
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.claimRef.namespace
        - fromFieldPath: spec.claimRef.name
        strategy: string
        string:
          fmt: "%s-%s-cluster"
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.credentials.secretRef.name
      transforms:
      - type: string
        string:
          fmt: "%s-cluster"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.cluster.identity.source
      toFieldPath: spec.identity.source
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.identity.secretRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.identity.secretRef.namespace
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: metadata.labels[ref.projectx.mavenwave.dev/tenant]
    readinessChecks:
    - type: None