apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: projectx-platform-controlplane-gcp
  labels:
    crossplane.io/xrd: controlplanes.platform.projectx.mavenwave.dev
    provider: gcp
spec:
  compositeTypeRef:
    apiVersion: platform.projectx.mavenwave.dev/v1alpha1
    kind: ControlPlane
  writeConnectionSecretsToNamespace: crossplane-system
  patchSets:
  - name: common
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.labels[ref.projectx.mavenwave.dev/controlplane]
  resources:
# Network
  - name: network
    base:
      apiVersion: compute.gcp.crossplane.io/v1beta1
      kind: Network
      spec:
        forProvider:
          autoCreateSubnetworks: false
          routingConfig:
            routingMode: GLOBAL
    patches:
    - type: PatchSet
      patchSetName: common
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.annotations[crossplane.io/external-name]
      transforms:
      - type: string
        string:
          fmt: "%s-controlplane"
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.labels[controlplanes.projectx.mavenwave.dev/network-id]
      transforms:
      - type: string
        string:
          fmt: "%s-controlplane"
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.network.id
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.selfLink
      toFieldPath: status.network.selfLink
# Firewall rule for GKE node egress
  - name: inter-node-fwrule
    base:
      apiVersion: compute.gcp.crossplane.io/v1alpha1
      kind: Firewall
      spec:
        forProvider:
          networkSelector:
            matchControllerRef: true
          allowed:
          - IPProtocol: tcp
          - IPProtocol: udp
          - IPProtocol: icmp
          - IPProtocol: sctp
          - IPProtocol: esp
          - IPProtocol: ah
          direction: EGRESS
    patches:
    - type: PatchSet
      patchSetName: common
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string: 
          fmt: "%s-cp-intra-cluster-egress"
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.annotations[crossplane.io/external-name]
      transforms:
      - type: string
        string: 
          fmt: "%s-cp-intra-cluster-egress"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.google.cluster.masterIpv4CidrBlock
      toFieldPath: spec.forProvider.destinationRanges[0]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.google.network.nodes.cidr
      toFieldPath: spec.forProvider.destinationRanges[1]
      policy:
        fromFieldPath: Required
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.google.network.pods.cidr
      toFieldPath: spec.forProvider.destinationRanges[2]
      policy:
        fromFieldPath: Required
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.google.network.nodes.tags
      toFieldPath: spec.forProvider.targetTags
      policy:
        fromFieldPath: Required
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.labels[controlplanes.projectx.mavenwave.dev/network-id]
# Firewall rule for GKE webhook ingress
  - name: webhooks-fwrule
    base:
      apiVersion: compute.gcp.crossplane.io/v1alpha1
      kind: Firewall
      spec:
        forProvider:
          networkSelector:
            matchControllerRef: true
          allowed:
          - IPProtocol: tcp
            ports:
            - "8443"
            - "9443"
            - "15017"
          direction: INGRESS
    patches:
    - type: PatchSet
      patchSetName: common
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string: 
          fmt: "%s-cp-webhooks"
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.annotations[crossplane.io/external-name]
      transforms:
      - type: string
        string: 
          fmt: "%s-cp-webhooks"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.google.cluster.masterIpv4CidrBlock
      toFieldPath: spec.forProvider.sourceRanges[0]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.google.network.nodes.tags
      toFieldPath: spec.forProvider.targetTags
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.labels[controlplanes.projectx.mavenwave.dev/network-id]
# Nat
  - name: router
    base:
      apiVersion: compute.gcp.crossplane.io/v1alpha1
      kind: Router
      spec:
        forProvider:
          networkSelector:
            matchControllerRef: true
          nats:
          - sourceSubnetworkIpRangesToNat: ALL_SUBNETWORKS_ALL_IP_RANGES
            natIpAllocateOption: AUTO_ONLY
    patches:
    - type: PatchSet
      patchSetName: common
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
      transforms:
      - type: map
        map:
          us-central: us-central1
          us-east: us-east1
          us-west: us-west1
    - type:  FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.nats[0].name
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.labels[xsimpleclusters.projectx.mavenwave.dev/network-id]
# KMS Keyring
  - name: kms-keyring
    base:
      apiVersion: kms.gcp.crossplane.io/v1alpha1
      kind: KeyRing
      spec:
        forProvider:
          location: 
    patches:
    - type: PatchSet
      patchSetName: common
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.location
      transforms:
      - type: map
        map:
          us-central: us-central1
          us-east: us-east1
          us-west: us-west1
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.labels[xsimpleclusters.projectx.mavenwave.dev/kms-id]
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.name
      toFieldPath: status.kms.keyRing.name
# # Kubernetes Providerconfig
#   - name: kubernetes-config
#     base:
#       apiVersion: kubernetes.crossplane.io/v1alpha1
#       kind: ProviderConfig
#       spec:
#         credentials:
#           source: Secret
#           secretRef:
#             key: config
#     patches:
#     - type: PatchSet
#       patchSetName: common
#     - type: FromCompositeFieldPath
#       fromFieldPath: metadata.name
#       toFieldPath: metadata.name
#       transforms:
#       - type: string
#         string:
#           fmt: "%s-vcluster"
#     - type: FromCompositeFieldPath
#       fromFieldPath: metadata.name
#       toFieldPath: spec.credentials.secretRef.namespace
#     - type: FromCompositeFieldPath
#       fromFieldPath: metadata.name
#       toFieldPath: spec.credentials.secretRef.name
#       transforms:
#       - type: string
#         string:
#           fmt: "%s-kubeconfig"
#     readinessChecks:
#       - type: None
# # Helm Providerconfig
#   - name: helm-config
#     base:
#       apiVersion: helm.crossplane.io/v1beta1
#       kind: ProviderConfig
#       spec:
#         credentials:
#           source: Secret
#           secretRef:
#             key: config
#     patches:
#     - type: PatchSet
#       patchSetName: common
#     - type: FromCompositeFieldPath
#       fromFieldPath: metadata.name
#       toFieldPath: metadata.name
#       transforms:
#       - type: string
#         string:
#           fmt: "%s-vcluster"
#     - type: FromCompositeFieldPath
#       fromFieldPath: metadata.name
#       toFieldPath: spec.credentials.secretRef.namespace
#     - type: FromCompositeFieldPath
#       fromFieldPath: metadata.name
#       toFieldPath: spec.credentials.secretRef.name
#       transforms:
#       - type: string
#         string:
#           fmt: "%s-kubeconfig"
#     readinessChecks:
#       - type: None
# # Crossplane
#   - name: crossplane
#     base:
#       apiVersion: helm.crossplane.io/v1beta1
#       kind: Release
#       metadata:
#         annotations: 
#           crossplane.io/external-name: crossplane
#       spec:
#         forProvider:
#           chart:
#             name: crossplane
#             repository: https://charts.crossplane.io/stable/
#             version: 1.8.1
#           namespace: crossplane-system
#           set:
#           - name: provider.packages[0]
#             value: crossplane/provider-gcp:v0.21.0
#           - name: provider.packages[1]
#             value: crossplane/provider-jet-gcp:v0.2.0-preview
#           - name: provider.packages[2]
#             value: crossplane/provider-kubernetes:v0.3.0
#           - name: provider.packages[3]
#             value: crossplane/provider-helm:v0.10.0
#           - name: configuration.packages[0]
#           wait: true
#         rollbackLimit: 5
#     patches:
#     - type: PatchSet
#       patchSetName: common
#     - type: FromCompositeFieldPath
#       fromFieldPath: metadata.name
#       toFieldPath: metadata.name
#       transforms:
#       - type: string
#         string:
#           fmt: "%s-crossplane"
#     - type: FromCompositeFieldPath
#       fromFieldPath: metadata.name
#       toFieldPath: spec.providerConfigRef.name
#       transforms:
#       - type: string
#         string:
#           fmt: "%s-vcluster"
#     - type: FromCompositeFieldPath
#       fromFieldPath: spec.parameters.platform.version
#       toFieldPath: spec.forProvider.set[4].value
#       transforms:
#       - type: string
#         string:
#           fmt: "us.gcr.io/bradw-nextgen-devops/projectx-platform:%s"